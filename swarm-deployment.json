{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "linuxAdminUsername": {
            "defaultValue": "azureuser",
            "type": "string",
            "metadata": {
                "description": "User name for the Linux Virtual Machines (SSH or Password)."
            }
        },
        "sshRSAPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH public key used for auth to all Linux machines."
            }
        },
        "masterEndpointDNSNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            }
        },
        "agentEndpointDNSNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            }
        },
        "agentCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100
            ],
            "type": "int",
            "metadata": {
                "description": "The number of Swarm agents for the cluster.  This value can be from 1 to 100."
            }
        },
        "masterCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                3,
                5
            ],
            "type": "int",
            "metadata": {
                "description": "The number of Swarm masters for the cluster. This value can be 1, 3 or 5."
            }
        },
        "agentVMSize": {
            "defaultValue": "Standard_D2",
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_DS1",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "type": "string",
            "metadata": {
                "description": "The size of the agent VMSS Virtual Machine."
            }
        },
        "masterVMSize": {
            "defaultValue": "Standard_D2",
            "allowedValues": [
                "Standard_D1",
                "Standard_D1_v2",
                "Standard_D2",
                "Standard_D2_v2"
            ],
            "type": "string",
            "metadata": {
                "description": "The size of the Master Virtual Machines."
            }
        },
        "linuxPublisher": {
            "defaultValue": "Canonical",
            "type": "string",
            "metadata": {
                "description": "This is the publisher of the image used by the linux cluster"
            }
        },
        "linuxOffer": {
            "defaultValue": "UbuntuServer",
            "type": "string",
            "metadata": {
                "description": "This is the offer of the image used by the linux cluster"
            }
        },
        "linuxSku": {
            "defaultValue": "16.04.0-LTS",
            "type": "string",
            "metadata": {
                "description": "This is the linux sku used by the linux cluster"
            }
        },
        "linuxVersion": {
            "defaultValue": "latest",
            "type": "string",
            "metadata": {
                "description": "This is the linux version used by the linux cluster"
            }
        },
        "nameSuffix": {
            "defaultValue": "01234567",
            "type": "string",
            "metadata": {
                "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
            }
        }
    },
    "variables": {
        "adminUsername": "[parameters('linuxAdminUsername')]",
        "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
        "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
        "agentCount": "[parameters('agentCount')]",
        "masterCount": "[parameters('masterCount')]",
        "agentVMSize": "[parameters('agentVMSize')]",
        "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
        "linuxPublisher": "[parameters('linuxPublisher')]",
        "linuxOffer": "[parameters('linuxOffer')]",
        "linuxSku": "[parameters('linuxSku')]",
        "linuxVersion": "[parameters('linuxVersion')]",
        "nameSuffix": "[parameters('nameSuffix')]",
        "storageLocation": "[resourceGroup().location]",
        "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
        "orchestratorName": "swarm",
        "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
        "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
        "osImagePublisher": "[variables('linuxPublisher')]",
        "osImageOffer": "[variables('linuxOffer')]",
        "osImageSKU": "[variables('linuxSku')]",
        "osImageVersion": "[variables('linuxVersion')]",
        "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "vnetAddressPrefix": "172.16.0.0/16",
        "masterSubnetName": "[concat(variables('orchestratorName'), '-master-subnet')]",
        "masterSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
        "masterSubnetPrefix": "172.16.0.0/24",
        "workerSubnetName": "[concat(variables('orchestratorName'), '-worker-subnet')]",
        "workerSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('workerSubnetName'))]",
        "workerSubnetPrefix": "172.16.1.0/24",
        "storageAccountBaseName": "[concat(uniqueString(concat(variables('masterEndpointDNSNamePrefix'),resourceGroup().location)), variables('orchestratorName'))]",
        "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
        "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
        "masterFirstAddr": 5,
        "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
        "agentAvailabilitySet": "[concat(variables('orchestratorName'), '-agent-availabilitySet-', variables('nameSuffix'))]",
        "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
        "masterVMSize": "[parameters('masterVMSize')]",
        "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
        "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
        "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
        "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
        "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
        "agentStorageAccountName": "[concat(variables('storageAccountBaseName'), '1')]",
        "agentsLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
        "agentsLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsLbName'))]",
        "agentsLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
        "agentsLbIPConfigID": "[concat(variables('agentsLbID'),'/frontendIPConfigurations/', variables('agentsLbIPConfigName'))]",
        "agentsLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
        "diagnosticsStorageAccountName": "[concat(variables('storageAccountBaseName'), 'diag', '0')]",
        "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
        "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
        "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
        "wadperfcounters": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
        "wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounters'),'<Metrics resourceId=\"')]",
        "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
        "computeApiVersion": "2016-03-30",
        "networkApiVersion": "2016-03-30",
        "storageApiVersion": "2015-06-15",
        "vmSizesMap": {
            "Standard_A0": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A6": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A7": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A9": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A10": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D1_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D5_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_DS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5": {
                "storageAccountType": "Premium_LRS"
            }
        },
        "masterCustomData": "I2Nsb3VkLWNvbmZpZw0KDQp3cml0ZV9maWxlczoNCiAtICBjb250ZW50OiB8DQogICAgICAgIFtTZXJ2aWNlXQ0KICAgICAgICBFeGVjU3RhcnQ9DQogICAgICAgIEV4ZWNTdGFydD0vdXNyL2Jpbi9kb2NrZXJkIC1IIHVuaXg6Ly8vdmFyL3J1bi9kb2NrZXIuc29jayAtSCAwLjAuMC4wOjIzNzUNCiAgICBwYXRoOiAvZXRjL3N5c3RlbWQvc3lzdGVtL2RvY2tlci5zZXJ2aWNlLmQvZG9ja2VyLmNvbmYNCiAgICBwZXJtaXNzaW9uczogJzA0NDQnDQogLSAgY29udGVudDogfA0KICAgICAgICAjIS9iaW4vYmFzaA0KDQogICAgICAgIERPQ0tFUl9DT01QT1NFX1ZFUlNJT049IjEuOC4xIg0KICAgICAgICBNQVNURVIwSE9TVE5BTUU9JHsxfQ0KICAgICAgICBBWlVSRVVTRVI9JHsyfQ0KDQogICAgICAgIGVjaG8gIiQoaG9zdG5hbWUgLWkpICQoaG9zdG5hbWUpIiB8IHN1ZG8gdGVlIC1hIC9ldGMvaG9zdHMNCg0KICAgICAgICBlY2hvICJJbnN0YWxsaW5nIGFuZCBjb25maWd1cmluZyBkb2NrZXIiDQoNCiAgICAgICAgaW5zdGFsbERvY2tlcigpDQogICAgICAgIHsNCiAgICAgICAgICAgIGZvciBpIGluIHsxLi4xMH07IGRvDQogICAgICAgICAgICAgICAgd2dldCAtLXRyaWVzIDQgLS1yZXRyeS1jb25ucmVmdXNlZCAtLXdhaXRyZXRyeT0xNSAtcU8tIGh0dHBzOi8vZ2V0LmRvY2tlci5jb20gfCBzaA0KICAgICAgICAgICAgICAgIGlmIFsgJD8gLWVxIDAgXQ0KICAgICAgICAgICAgICAgIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgIyBob3N0bmFtZSBoYXMgYmVlbiBmb3VuZCBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICBlY2hvICJEb2NrZXIgaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseSINCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBmaQ0KICAgICAgICAgICAgICAgIHNsZWVwIDEwDQogICAgICAgICAgICBkb25lDQogICAgICAgIH0NCiAgICAgICAgdGltZSBpbnN0YWxsRG9ja2VyDQogICAgICAgIHN1ZG8gdXNlcm1vZCAtYUcgZG9ja2VyICRBWlVSRVVTRVINCg0KICAgICAgICBzdWRvIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkDQogICAgICAgIHN1ZG8gc2VydmljZSBkb2NrZXIgcmVzdGFydA0KDQogICAgICAgIGVjaG8gIkluc3RhbGxpbmcgZG9ja2VyIGNvbXBvc2UiDQogICAgICAgIGluc3RhbGxEb2NrZXJDb21wb3NlKCkNCiAgICAgICAgew0KICAgICAgICAgICAgZm9yIGkgaW4gezEuLjEwfTsgZG8NCiAgICAgICAgICAgICAgICB3Z2V0IC0tdHJpZXMgNCAtLXJldHJ5LWNvbm5yZWZ1c2VkIC0td2FpdHJldHJ5PTE1IC1xTy0gaHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2VzL2Rvd25sb2FkLyRET0NLRVJfQ09NUE9TRV9WRVJTSU9OL2RvY2tlci1jb21wb3NlLWB1bmFtZSAtc2AtYHVuYW1lIC1tYCA+IC91c3IvbG9jYWwvYmluL2RvY2tlci1jb21wb3NlDQogICAgICAgICAgICAgICAgaWYgWyAkPyAtZXEgMCBdDQogICAgICAgICAgICAgICAgdGhlbg0KICAgICAgICAgICAgICAgICAgICAjIGhvc3RuYW1lIGhhcyBiZWVuIGZvdW5kIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIGVjaG8gImRvY2tlci1jb21wb3NlIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkiDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZmkNCiAgICAgICAgICAgICAgICBzbGVlcCAxMA0KICAgICAgICAgICAgZG9uZQ0KICAgICAgICB9DQogICAgICAgIHRpbWUgaW5zdGFsbERvY2tlckNvbXBvc2UNCiAgICAgICAgY2htb2QgK3ggL3Vzci9sb2NhbC9iaW4vZG9ja2VyLWNvbXBvc2UNCg0KICAgICAgICBlbnN1cmVEb2NrZXIoKQ0KICAgICAgICB7DQogICAgICAgICAgICAjIGVuc3VyZSB0aGF0IGRvY2tlciBpcyBoZWFsdGh5DQogICAgICAgICAgICBkb2NrZXJIZWFsdGh5PTENCiAgICAgICAgICAgIGZvciBpIGluIHsxLi4zfTsgZG8NCiAgICAgICAgICAgICAgICBzdWRvIGRvY2tlciBpbmZvDQogICAgICAgICAgICAgICAgaWYgWyAkPyAtZXEgMCBdDQogICAgICAgICAgICAgICAgdGhlbg0KICAgICAgICAgICAgICAgICAgICAjIGhvc3RuYW1lIGhhcyBiZWVuIGZvdW5kIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIGRvY2tlckhlYWx0aHk9MA0KICAgICAgICAgICAgICAgICAgICBlY2hvICJEb2NrZXIgaXMgaGVhbHRoeSINCiAgICAgICAgICAgICAgICAgICAgc3VkbyBkb2NrZXIgcHMgLWENCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBmaQ0KICAgICAgICAgICAgICAgIHNsZWVwIDEwDQogICAgICAgICAgICBkb25lDQogICAgICAgICAgICBpZiBbICRkb2NrZXJIZWFsdGh5IC1uZSAwIF0NCiAgICAgICAgICAgIHRoZW4NCiAgICAgICAgICAgICAgICBlY2hvICJEb2NrZXIgaXMgbm90IGhlYWx0aHkiDQogICAgICAgICAgICBmaQ0KICAgICAgICB9DQogICAgICAgIGVuc3VyZURvY2tlcg0KDQogICAgICAgIGVjaG8gInRoaXMgbm9kZSBpcyBhIG1hc3RlciINCiAgICAgICAgaWYgWyAiJChob3N0bmFtZSkiID0gIiRNQVNURVIwSE9TVE5BTUUiIF07IHRoZW4NCiAgICAgICAgICAgIGVjaG8gInRoaXMgaXMgdGhlIGZpcnN0IG1hc3RlciwgY3JlYXRpbmcgc3dhcm0iDQogICAgICAgICAgICBkb2NrZXIgc3dhcm0gaW5pdCAtLWFkdmVydGlzZS1hZGRyICQoaG9zdG5hbWUgLWkpOjIzNzcgLS1saXN0ZW4tYWRkciAkKGhvc3RuYW1lIC1pKToyMzc3DQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIGVjaG8gInRoaXMgaXMgYSBzZWNvbmRhcnkgbWFzdGVyIg0KICAgICAgICAgICAgc3dhcm1rZXk9IiINCiAgICAgICAgICAgIGhhc3N3YXJta2V5PTENCiAgICAgICAgICAgIGZvciBpIGluIHsxLi4xMjB9OyBkbw0KICAgICAgICAgICAgICAgIHN3YXJta2V5PSQoZG9ja2VyIC1IICQoZGlnICtzaG9ydCArc2VhcmNoICRNQVNURVIwSE9TVE5BTUUpOjIzNzUgc3dhcm0gam9pbi10b2tlbiBtYW5hZ2VyIC1xKQ0KICAgICAgICAgICAgICAgIGlmIFsgJD8gLWVxIDAgXTsgdGhlbg0KICAgICAgICAgICAgICAgICAgICBoYXNzd2FybWtleT0wDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGZpIA0KICAgICAgICAgICAgZG9uZQ0KICAgICAgICAgICAgaWYgWyAkaGFzc3dhcm1rZXkgLW5lIDAgXQ0KICAgICAgICAgICAgdGhlbg0KICAgICAgICAgICAgICAgIGVjaG8gImNvdWxkbid0IGNvbm5lY3QgdG8gc3dhcm0sIGFib3J0aW5nLiINCiAgICAgICAgICAgICAgICBleGl0IDINCiAgICAgICAgICAgIGZpDQogICAgICAgICAgICBkb2NrZXIgc3dhcm0gam9pbiAtLXRva2VuICRzd2FybWtleSAkKGRpZyArc2hvcnQgK3NlYXJjaCAkTUFTVEVSMEhPU1ROQU1FKToyMzc3DQogICAgICAgIGZpDQogICAgICAgIGVjaG8gImNvbXBsZXRlZCBzd2FybSBjb25maWd1cmF0aW9uIg0KICAgIHBhdGg6IC9vcHQvYXp1cmUvY29udGFpbmVycy9jb25maWd1cmUtc3dhcm0tY2x1c3Rlci5zaA0KICAgIHBlcm1pc3Npb25zOiAnMDc0NCcNCiAtICBjb250ZW50OiB8DQogICAgICAgICMhL2Jpbi9iYXNoDQogICAgICAgIHN1ZG8gbWtkaXIgL3Zhci9sb2cvYXp1cmUNCiAgICAgICAgL3Vzci9iaW4vbm9odXAgc3VkbyAvYmluL2Jhc2ggLWMgIi9iaW4vYmFzaCAvb3B0L2F6dXJlL2NvbnRhaW5lcnMvY29uZmlndXJlLXN3YXJtLWNsdXN0ZXIuc2ggc3dhcm0tbWFzdGVyLTEgY2x1c3Rlcm1hbmFnZXIgPiAvdmFyL2xvZy9henVyZS9jbHVzdGVyLWJvb3RzdHJhcC5sb2cgMj4mMSAmIiAmDQogICAgICAgIA0KICAgIHBhdGg6IC9vcHQvYXp1cmUvY29udGFpbmVycy9pbnN0YWxsLWNsdXN0ZXIuc2gNCiAgICBwZXJtaXNzaW9uczogJzA3NDQnDQpydW5jbWQ6DQogLSAgWyAvYmluL2Jhc2gsIC9vcHQvYXp1cmUvY29udGFpbmVycy9pbnN0YWxsLWNsdXN0ZXIuc2ggXQ0KDQo=",
        "agentCustomData": "I2Nsb3VkLWNvbmZpZw0KDQp3cml0ZV9maWxlczoNCiAtICBjb250ZW50OiB8DQogICAgICAgIFtTZXJ2aWNlXQ0KICAgICAgICBFeGVjU3RhcnQ9DQogICAgICAgIEV4ZWNTdGFydD0vdXNyL2Jpbi9kb2NrZXJkIC1IIHVuaXg6Ly8vdmFyL3J1bi9kb2NrZXIuc29jayAtSCAwLjAuMC4wOjIzNzUNCiAgICBwYXRoOiAvZXRjL3N5c3RlbWQvc3lzdGVtL2RvY2tlci5zZXJ2aWNlLmQvZG9ja2VyLmNvbmYNCiAgICBwZXJtaXNzaW9uczogJzA0NDQnDQogLSAgY29udGVudDogfA0KICAgICAgICAjIS9iaW4vYmFzaA0KDQogICAgICAgIERPQ0tFUl9DT01QT1NFX1ZFUlNJT049IjEuOC4xIg0KICAgICAgICBNQVNURVIwSE9TVE5BTUU9JHsxfQ0KICAgICAgICBBWlVSRVVTRVI9JHsyfQ0KDQogICAgICAgIGVjaG8gIiQoaG9zdG5hbWUgLWkpICQoaG9zdG5hbWUpIiB8IHN1ZG8gdGVlIC1hIC9ldGMvaG9zdHMNCg0KICAgICAgICBlY2hvICJJbnN0YWxsaW5nIGFuZCBjb25maWd1cmluZyBkb2NrZXIiDQoNCiAgICAgICAgaW5zdGFsbERvY2tlcigpDQogICAgICAgIHsNCiAgICAgICAgICAgIGZvciBpIGluIHsxLi4xMH07IGRvDQogICAgICAgICAgICAgICAgd2dldCAtLXRyaWVzIDQgLS1yZXRyeS1jb25ucmVmdXNlZCAtLXdhaXRyZXRyeT0xNSAtcU8tIGh0dHBzOi8vZ2V0LmRvY2tlci5jb20gfCBzaA0KICAgICAgICAgICAgICAgIGlmIFsgJD8gLWVxIDAgXQ0KICAgICAgICAgICAgICAgIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgIyBob3N0bmFtZSBoYXMgYmVlbiBmb3VuZCBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICBlY2hvICJEb2NrZXIgaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseSINCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBmaQ0KICAgICAgICAgICAgICAgIHNsZWVwIDEwDQogICAgICAgICAgICBkb25lDQogICAgICAgIH0NCiAgICAgICAgdGltZSBpbnN0YWxsRG9ja2VyDQogICAgICAgIHN1ZG8gdXNlcm1vZCAtYUcgZG9ja2VyICRBWlVSRVVTRVINCg0KICAgICAgICBzdWRvIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkDQogICAgICAgIHN1ZG8gc2VydmljZSBkb2NrZXIgcmVzdGFydA0KDQogICAgICAgIGVjaG8gIkluc3RhbGxpbmcgZG9ja2VyIGNvbXBvc2UiDQogICAgICAgIGluc3RhbGxEb2NrZXJDb21wb3NlKCkNCiAgICAgICAgew0KICAgICAgICAgICAgZm9yIGkgaW4gezEuLjEwfTsgZG8NCiAgICAgICAgICAgICAgICB3Z2V0IC0tdHJpZXMgNCAtLXJldHJ5LWNvbm5yZWZ1c2VkIC0td2FpdHJldHJ5PTE1IC1xTy0gaHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2VzL2Rvd25sb2FkLyRET0NLRVJfQ09NUE9TRV9WRVJTSU9OL2RvY2tlci1jb21wb3NlLWB1bmFtZSAtc2AtYHVuYW1lIC1tYCA+IC91c3IvbG9jYWwvYmluL2RvY2tlci1jb21wb3NlDQogICAgICAgICAgICAgICAgaWYgWyAkPyAtZXEgMCBdDQogICAgICAgICAgICAgICAgdGhlbg0KICAgICAgICAgICAgICAgICAgICAjIGhvc3RuYW1lIGhhcyBiZWVuIGZvdW5kIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIGVjaG8gImRvY2tlci1jb21wb3NlIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkiDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZmkNCiAgICAgICAgICAgICAgICBzbGVlcCAxMA0KICAgICAgICAgICAgZG9uZQ0KICAgICAgICB9DQogICAgICAgIHRpbWUgaW5zdGFsbERvY2tlckNvbXBvc2UNCiAgICAgICAgY2htb2QgK3ggL3Vzci9sb2NhbC9iaW4vZG9ja2VyLWNvbXBvc2UNCg0KICAgICAgICBlbnN1cmVEb2NrZXIoKQ0KICAgICAgICB7DQogICAgICAgICAgICAjIGVuc3VyZSB0aGF0IGRvY2tlciBpcyBoZWFsdGh5DQogICAgICAgICAgICBkb2NrZXJIZWFsdGh5PTENCiAgICAgICAgICAgIGZvciBpIGluIHsxLi4zfTsgZG8NCiAgICAgICAgICAgICAgICBzdWRvIGRvY2tlciBpbmZvDQogICAgICAgICAgICAgICAgaWYgWyAkPyAtZXEgMCBdDQogICAgICAgICAgICAgICAgdGhlbg0KICAgICAgICAgICAgICAgICAgICAjIGhvc3RuYW1lIGhhcyBiZWVuIGZvdW5kIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIGRvY2tlckhlYWx0aHk9MA0KICAgICAgICAgICAgICAgICAgICBlY2hvICJEb2NrZXIgaXMgaGVhbHRoeSINCiAgICAgICAgICAgICAgICAgICAgc3VkbyBkb2NrZXIgcHMgLWENCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBmaQ0KICAgICAgICAgICAgICAgIHNsZWVwIDEwDQogICAgICAgICAgICBkb25lDQogICAgICAgICAgICBpZiBbICRkb2NrZXJIZWFsdGh5IC1uZSAwIF0NCiAgICAgICAgICAgIHRoZW4NCiAgICAgICAgICAgICAgICBlY2hvICJEb2NrZXIgaXMgbm90IGhlYWx0aHkiDQogICAgICAgICAgICBmaQ0KICAgICAgICB9DQogICAgICAgIGVuc3VyZURvY2tlcg0KDQogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiAgICAgICAgIyBjb25maWd1cmUgc3dhcm0NCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQogICAgICAgIGVjaG8gInRoaXMgbm9kZSBpcyBhbiBhZ2VudCINCiAgICAgICAgc3dhcm1rZXk9IiINCiAgICAgICAgaGFzc3dhcm1rZXk9MQ0KICAgICAgICBmb3IgaSBpbiB7MS4uMTIwfTsgZG8NCiAgICAgICAgICAgIHN3YXJta2V5PSQoZG9ja2VyIC1IICQoZGlnICtzaG9ydCArc2VhcmNoICRNQVNURVIwSE9TVE5BTUUpOjIzNzUgc3dhcm0gam9pbi10b2tlbiB3b3JrZXIgLXEpDQogICAgICAgICAgICBpZiBbICQ/IC1lcSAwIF07IHRoZW4NCiAgICAgICAgICAgICAgICBoYXNzd2FybWtleT0wDQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBmaSANCiAgICAgICAgZG9uZQ0KICAgICAgICBpZiBbICRoYXNzd2FybWtleSAtbmUgMCBdDQogICAgICAgIHRoZW4NCiAgICAgICAgICAgIGVjaG8gImNvdWxkbid0IGNvbm5lY3QgdG8gc3dhcm0sIGFib3J0aW5nLiINCiAgICAgICAgICAgIGV4aXQgMg0KICAgICAgICBmaQ0KICAgICAgICBkb2NrZXIgc3dhcm0gam9pbiAtLXRva2VuICRzd2FybWtleSAkKGRpZyArc2hvcnQgK3NlYXJjaCAkTUFTVEVSMEhPU1ROQU1FKToyMzc3ICANCg0KICAgIHBhdGg6IC9vcHQvYXp1cmUvY29udGFpbmVycy9jb25maWd1cmUtc3dhcm0tY2x1c3Rlci5zaA0KICAgIHBlcm1pc3Npb25zOiAnMDc0NCcNCiAtICBjb250ZW50OiB8DQogICAgICAgICMhL2Jpbi9iYXNoDQogICAgICAgIHN1ZG8gbWtkaXIgL3Zhci9sb2cvYXp1cmUNCiAgICAgICAgL3Vzci9iaW4vbm9odXAgc3VkbyAvYmluL2Jhc2ggLWMgIi9iaW4vYmFzaCAvb3B0L2F6dXJlL2NvbnRhaW5lcnMvY29uZmlndXJlLXN3YXJtLWNsdXN0ZXIuc2ggc3dhcm0tbWFzdGVyLTEgY2x1c3Rlcm1hbmFnZXIgPiAvdmFyL2xvZy9henVyZS9jbHVzdGVyLWJvb3RzdHJhcC5sb2cgMj4mMSAmIiAmDQogICAgICAgIA0KICAgIHBhdGg6IC9vcHQvYXp1cmUvY29udGFpbmVycy9pbnN0YWxsLWNsdXN0ZXIuc2gNCiAgICBwZXJtaXNzaW9uczogJzA3NDQnDQpydW5jbWQ6DQogLSAgWyAvYmluL2Jhc2gsIC9vcHQvYXp1cmUvY29udGFpbmVycy9pbnN0YWxsLWNsdXN0ZXIuc2ggXQ0KDQo="
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('masterStorageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('diagnosticsStorageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('workerSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('workerSubnetPrefix')]"
                        }
                    },
                    {
                        "name": "[variables('masterSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('masterSubnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('masterAvailabilitySet')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {}
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('agentAvailabilitySet')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('masterPublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('masterLbName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('masterLbIPConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('masterLbBackendPoolName')]"
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "masterLbLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('masterLbIPConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(20022)]",
                "backendPort": 22,
                "enableFloatingIP": false
            },
            "dependsOn": [
                "[variables('masterLbID')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipConfigNode",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat(split(variables('masterSubnetPrefix'),'0/24')[0], copyIndex(variables('masterFirstAddr')))]",
                            "subnet": {
                                "id": "[variables('masterSubnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('masterLbID')]",
                "[variables('vnetID')]",
                "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('masterVMSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "",
                    "customData": "[variables('masterCustomData')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[variables('sshKeyPath')]",
                                    "keyData": "[variables('sshRSAPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('osImagePublisher')]",
                        "offer": "[variables('osImageOffer')]",
                        "sku": "[variables('osImageSKU')]",
                        "version": "[variables('osImageVersion')]"
                    },
                    "osDisk": {
                        "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob, 'vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
                "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
                "[variables('masterStorageAccountName')]",
                "[variables('diagnosticsStorageAccountName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/linuxdiagnostic')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "LinuxDiagnostic",
                "typeHandlerVersion": "2.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('masterVMNamePrefix'), copyIndex(), variables('wadcfgxend')))]",
                    "StorageAccount": "[variables('diagnosticsStorageAccountName')]"
                },
                "protectedSettings": {
                    "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listKeys(variables('accountid'), variables('storageApiVersion')).key1]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), copyIndex()))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('agentStorageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('agentPublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('agentsLbName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('agentsLbIPConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('agentsLbBackendPoolName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRuleHTTP",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('agentsLbIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPProbe')]"
                            }
                        }
                    },
                    {
                        "name": "LBRuleHTTPS",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('agentsLbIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPSProbe')]"
                            }
                        }
                    },
                    {
                        "name": "LBRulePort8080",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('agentsLbIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 8080,
                            "backendPort": 8080,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('agentsLbID'),'/probes/tcpPort8080Probe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpHTTPProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "tcpHTTPSProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "tcpPort8080Probe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 8080,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('agentVMNamePrefix'), 'nic-', copyIndex())]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoopNode",
                "count": "[variables('agentCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "workerNodeNicIPConfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('workerSubnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('agentsLbID')]",
                "[variables('vnetID')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('agentVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('agentCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentAvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('agentVMSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('agentVMNamePrefix'), copyIndex())]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "",
                    "customData": "[variables('agentCustomData')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[variables('sshKeyPath')]",
                                    "keyData": "[variables('sshRSAPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('osImagePublisher')]",
                        "offer": "[variables('osImageOffer')]",
                        "sku": "[variables('osImageSKU')]",
                        "version": "[variables('osImageVersion')]"
                    },
                    "osDisk": {
                        "name": "[concat(variables('agentVMNamePrefix'), copyIndex(),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('agentStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob, 'vhds/', variables('agentVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentVMNamePrefix'), 'nic-', copyIndex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('agentVMNamePrefix'), 'nic-', copyIndex())]",
                "[concat('Microsoft.Compute/availabilitySets/',variables('agentAvailabilitySet'))]",
                "[variables('agentStorageAccountName')]",
                "[variables('diagnosticsStorageAccountName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('agentVMNamePrefix'), copyIndex(), '/linuxdiagnostic')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('agentCount')]"
            },
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "LinuxDiagnostic",
                "typeHandlerVersion": "2.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('agentVMNamePrefix'), copyIndex(), variables('wadcfgxend')))]",
                    "StorageAccount": "[variables('diagnosticsStorageAccountName')]"
                },
                "protectedSettings": {
                    "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listKeys(variables('accountid'), variables('storageApiVersion')).key1]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', concat(variables('agentVMNamePrefix'), copyIndex()))]"
            ]
        }
    ],
    "outputs": {
        "masterFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
        },
        "agentFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))).dnsSettings.fqdn]"
        },
        "diagnosticsStorageAccountUri": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
        }
    }
}