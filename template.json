{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "linuxAdminUsername": {
            "defaultValue": "azureuser",
            "type": "string",
            "metadata": {
                "description": "User name for the Linux Virtual Machines (SSH or Password)."
            }
        },
        "sshRSAPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH public key used for auth to all Linux machines."
            }
        },
        "masterEndpointDNSNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            }
        },
        "agentEndpointDNSNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            }
        },
        "agentCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100
            ],
            "type": "int",
            "metadata": {
                "description": "The number of Swarm agents for the cluster.  This value can be from 1 to 100."
            }
        },
        "masterCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                3,
                5
            ],
            "type": "int",
            "metadata": {
                "description": "The number of Swarm masters for the cluster. This value can be 1, 3 or 5."
            }
        },
        "agentVMSize": {
            "defaultValue": "Standard_D2",
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_DS1",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "type": "string",
            "metadata": {
                "description": "The size of the agent VMSS Virtual Machine."
            }
        },
        "masterVMSize": {
            "defaultValue": "Standard_D2",
            "allowedValues": [
                "Standard_D2",
                "Standard_D2_v2"
            ],
            "type": "string",
            "metadata": {
                "description": "The size of the Master Virtual Machines."
            }
        },
        "enableVMDiagnostics": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Allows user to enable/disable Boot and VM diagnostics."
            }
        },
        "linuxPublisher": {
            "defaultValue": "Canonical",
            "type": "string",
            "metadata": {
                "description": "This is the publisher of the image used by the linux cluster"
            }
        },
        "linuxOffer": {
            "defaultValue": "UbuntuServer",
            "type": "string",
            "metadata": {
                "description": "This is the offer of the image used by the linux cluster"
            }
        },
        "linuxSku": {
            "defaultValue": "14.04.4-LTS",
            "type": "string",
            "metadata": {
                "description": "This is the linux sku used by the linux cluster"
            }
        },
        "linuxVersion": {
            "defaultValue": "latest",
            "type": "string",
            "metadata": {
                "description": "This is the linux version used by the linux cluster"
            }
        },
        "nameSuffix": {
            "defaultValue": "01234567",
            "type": "string",
            "metadata": {
                "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
            }
        },
        "vmsPerStorageAccount": {
            "defaultValue": 20,
            "type": "int",
            "metadata": {
                "description": "This specifies the number of VMs per storage accounts"
            }
        },
        "postInstallScriptURI": {
            "defaultValue": "disabled",
            "type": "string",
            "metadata": {
                "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
            }
        }
    },
    "variables": {
        "adminUsername": "[parameters('linuxAdminUsername')]",
        "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
        "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
        "agentCount": "[parameters('agentCount')]",
        "masterCount": "[parameters('masterCount')]",
        "agentVMSize": "[parameters('agentVMSize')]",
        "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
        "linuxPublisher": "[parameters('linuxPublisher')]",
        "linuxOffer": "[parameters('linuxOffer')]",
        "linuxSku": "[parameters('linuxSku')]",
        "linuxVersion": "[parameters('linuxVersion')]",
        "vmsPerStorageAccount": "[parameters('vmsPerStorageAccount')]",
        "postInstallScriptURI": "[parameters('postInstallScriptURI')]",
        "nameSuffix": "[parameters('nameSuffix')]",
        "storageLocation": "[resourceGroup().location]",
        "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
        "disablePasswordAuthentication": "true",
        "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[variables('sshKeyPath')]",
                        "keyData": "[variables('sshRSAPublicKey')]"
                    }
                ]
            }
        },
        "orchestratorName": "swarm",
        "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
        "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
        "osImagePublisher": "[variables('linuxPublisher')]",
        "osImageOffer": "[variables('linuxOffer')]",
        "osImageSKU": "[variables('linuxSku')]",
        "osImageVersion": "[variables('linuxVersion')]",
        "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "vnetAddressPrefix": "10.0.0.0/16",
        "masterSubnetName": "[concat(variables('orchestratorName'), '-master-subnet')]",
        "masterSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
        "masterSubnetPrefix": "10.0.0.0/24",
        "workerSubnetName": "[concat(variables('orchestratorName'), '-worker-subnet')]",
        "workerSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('workerSubnetName'))]",
        "workerSubnetPrefix": "10.0.1.0/24",
        "storageAccountPrefixes": [
            "0",
            "6",
            "c",
            "i",
            "o",
            "u",
            "1",
            "7",
            "d",
            "j",
            "p",
            "v",
            "2",
            "8",
            "e",
            "k",
            "q",
            "w",
            "3",
            "9",
            "f",
            "l",
            "r",
            "x",
            "4",
            "a",
            "g",
            "m",
            "s",
            "y",
            "5",
            "b",
            "h",
            "n",
            "t",
            "z"
        ],
        "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
        "storageAccountBaseName": "[concat(uniqueString(concat(variables('masterEndpointDNSNamePrefix'),resourceGroup().location)), variables('orchestratorName'))]",
        "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
        "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
        "masterFirstAddr": 5,
        "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
        "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
        "masterVMSize": "[parameters('masterVMSize')]",
        "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
        "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
        "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
        "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
        "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
        "agentsLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
        "agentsLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsLbName'))]",
        "agentsLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
        "agentsLbIPConfigID": "[concat(variables('agentsLbID'),'/frontendIPConfigurations/', variables('agentsLbIPConfigName'))]",
        "agentsLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
        "agentMaxVMs": 100,
        "agentStorageAccountsCount": "[div(variables('agentMaxVMs'), variables('vmsPerStorageAccount'))]",
        "enableVMDiagnostics": "[parameters('enableVMDiagnostics')]",
        "diagnosticsStorageAccountName": "[concat(variables('storageAccountBaseName'), 'diag', '0')]",
        "diagnosticsStorageAccountName-true": "[variables('diagnosticsStorageAccountName')]",
        "diagnosticsStorageAccountName-false": "",
        "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
        "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
        "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
        "wadperfcounters1-true": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
        "wadperfcounters2-true": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
        "wadperfcounters1-false": "",
        "wadperfcounters2-false": "",
        "wadcfgxstart": "[concat(variables('wadlogs'),variables(concat('wadperfcounters1','-',variables('enableVMDiagnostics'))),variables(concat('wadperfcounters2','-',variables('enableVMDiagnostics'))),'<Metrics resourceId=\"')]",
        "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
        "computeApiVersion": "2016-03-30",
        "networkApiVersion": "2016-03-30",
        "storageApiVersion": "2015-06-15",
        "vmSizesMap": {
            "Standard_A0": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A6": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A7": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A8": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A9": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A10": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_A11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D1_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D2_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D3_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D4_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D5_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D11_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D12_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D13_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_D14_v2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G1": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G2": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G3": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G4": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_G5": {
                "storageAccountType": "Standard_LRS"
            },
            "Standard_DS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS11": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS12": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS13": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_DS14": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS1": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS2": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS3": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS4": {
                "storageAccountType": "Premium_LRS"
            },
            "Standard_GS5": {
                "storageAccountType": "Premium_LRS"
            }
        },
        "cloudConfigScript": "H4sIAAAAAAAAA81YW0/bSBR+9684NVEv2jpOoKirorBCQJdoC0EJ7cOuqmZij8lsnJngGXPZNv99z1yc2InTUhakLRXYczvfOd+5jbeehSPGwxGRY8/bevg/bwsOBU/YZZ5RGNyQbPqfTvMkVRDceh6NxgJ8qUimGL8EqU+GyEkiignuezFR1JtJILj+qHf4x3H/y2Hv9Lw3OP7y6bg/6PbOOn67+Wuz5a+oiKDPSUamVNFMrkx53cHpweDiuN9pfG3Pve75wdGRft6ee3a8tRjamXsHf37sH38cmNVv5h7KvuieDS4OPnwYHPa75xcf+12c2Z17n07PDk6PO8OxkIqj5GGt1Y01p1PB4X3OI62lrF3mUS7R4Af/4K8zqm5ENnn5yvvqAWyBnQI1pqCFgZYGTEJGpUivySiluEzP9M0APaEkVeO7ThuHE5EBA8bha7vZbG+35nsQCxy3G6BhtTADLIG/oPEbBPQKWvDZjKFMbh40jkJTGBMJI0o5np7zWJOIlObULaxB0nJT1geqilgtqPTdmlFGycQ8J8z8kSmlM9DKxIJrIRbouhgIOHXIF7itxKW0WFAJXKhC7GsgI2E9knF0zjS1OOgtU0YmglglgVt+QP+SOOnev2P2pdVvLnU49MKYXoc8T1MYKzV7F+rQvWxGYvqoTKwAW2eh0ASdaWwX/YiF1ioNVRmbKVgRpylwIjdRwBKbHezLDMiSmG3P4VoPDlwYEV7Qey92VoLCGDZg/3cmnoIItFwpNozR4xjf5MM5mtdktk31CZNlIVrSNNEMHZ0NNi0+wdRs8vawxNrQ1ZlGMVukOB++gcxjAYriOgIhVVGoN8p1NIija7WEIxFNaLa+wolxy7RdiGXdlDP9HpudWKicwexJLqlXPbC1mh8ClTHMU2/wKaMquwvwYJ7RJJc0xrEbwpQZ77R3IbjqBSaLSEwjuLtpBetkolUeP6ofW62tKoUnICSZRxF6SYIJ7f4ZZO4ppgtZ2TyeoQjVzKYCNSW/OzNCY1GXnelfuP6gd34x6PjBCeSc3aIFwmuShVnOQ2cGiX8Ap1tN8/Nue+ftrv+izhlimpA8VW5jDcMOChp2JiT1q8Qe2tGn5pepcT7S3DqYoUMTZjSlRFKJ4zc8FSQOG/UdlNsYuI3BMLehI4eLx+kQ9iHMZRamIiKp6Suru57AqaoCnsK5HEVeNNbO9cvtD1S0voiueM0iWpCP+Ul3sEW/VgnqUjEiqtiwTOgGmh7bWIp2ln5iZBdH8EQ8qsGrMFq1sb1Wh8qIsEUPyM92ChWpm+vTEkCpNPnVYuKSxU9eTDCtR4ubjXzAzQZzudGkuFAYItrwea/QoaiwBnxsmnQCUyKVLgTODn7DXjd86OBz5Qbil46qHIb/ddlOWIYdjj0PizUafnmVsjQ5fuzlinGmcw2JrymWbgx1XczBideJ8C3OpgxP4+tTWpvUBXoVCcGYQDvGJLsr6QZW6ITedXz7jj64GGpbB9nYd5V2N146JTBpV81jcrfT7W/BeKDEBF18Sji51OuvXrmzVuJkrxwkVVytxahx4z33mjBw5uTlVFfaWfLfSgxaU0UiT2P+Qml/4zRSoITFveyjmkVcLZqlRQBVSNSK6oJhVG0sxK9b5q0NEUdanSdyQDtxpQVXuVplajNPD2dJ930lkr5HUR1BJXosOdW7YC0xK5F0f1Kqd4wH0gHg6bujBVj3GQGeYQKImdQX+BhD36skkaKMI6rXprecsGiio10kCczMTce1qDLK2MywuvgABEEEfqXV2G7du9eoB/sN/Wicz0oy9rFH0M1WKi5Dorv7MEpznQ6CkRBKqozMAg3U4WziOtjef96G576xjNVzlgld3REi1kyKeopkoZH9EmQ+ChUUTmcpVbopqPt89C/XDS4uAxMAAA==",
        "cloudConfigScriptLocation": "/opt/azure/containers/configure-swarm-cluster.sh"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('masterStorageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('diagnosticsStorageAccountName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('storageLocation')]",
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('workerSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('workerSubnetPrefix')]"
                        }
                    },
                    {
                        "name": "[variables('masterSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('masterSubnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('masterAvailabilitySet')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('masterPublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('masterLbName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('masterLbIPConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('masterLbBackendPoolName')]"
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "masterLbLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('masterLbIPConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(2200)]",
                "backendPort": 22,
                "enableFloatingIP": false
            },
            "dependsOn": [
                "[variables('masterLbID')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipConfigNode",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat(split(variables('masterSubnetPrefix'),'0/24')[0], copyIndex(variables('masterFirstAddr')))]",
                            "subnet": {
                                "id": "[variables('masterSubnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('masterLbID')]",
                "[variables('vnetID')]",
                "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('masterVMSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
                    "adminUsername": "[variables('adminUsername')]",
                    "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        ',variables('cloudConfigScript'),'\n    path: ',variables('cloudConfigScriptLocation'),'\n    permissions: \"0744\"\n\n',concat(' -  content: |\n        #!/bin/bash\n        ',concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',concat('1',' ',reference(resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))).ipConfigurations[0].properties.privateIPAddress,' ',reference(resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-0'))).ipConfigurations[0].properties.privateIPAddress, ' ',variables('adminUsername'),' ',variables('postInstallScriptURI')),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &'),'\n    path: /opt/azure/containers/install-cluster.sh\n    permissions: \"0744\"\n'),concat('runcmd:\n -  [ /bin/bash, /opt/azure/containers/install-cluster.sh ]\n\n')))]",
                    "linuxConfiguration": "[variables('linuxConfiguration')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('osImagePublisher')]",
                        "offer": "[variables('osImageOffer')]",
                        "sku": "[variables('osImageSKU')]",
                        "version": "[variables('osImageVersion')]"
                    },
                    "osDisk": {
                        "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob, 'vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "[variables('enableVMDiagnostics')]",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
                "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
                "[variables('masterStorageAccountName')]",
                "[variables('diagnosticsStorageAccountName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/linuxdiagnostic')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "LinuxDiagnostic",
                "typeHandlerVersion": "2.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('masterVMNamePrefix'), copyIndex(), variables('wadcfgxend')))]",
                    "StorageAccount": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]"
                },
                "protectedSettings": {
                    "storageAccountName": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]",
                    "storageAccountKey": "[listKeys(variables('accountid'), variables('storageApiVersion')).key1]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), copyIndex()))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(variables('storageAccountPrefixes')[mod(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),copyIndex(1))]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('storageLocation')]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('agentStorageAccountsCount')]"
            },
            "properties": {
                "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('agentPublicIPAddressName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('agentsLbName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('agentsLbIPConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('agentsLbBackendPoolName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRuleHTTP",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('agentsLbIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPProbe')]"
                            }
                        }
                    },
                    {
                        "name": "LBRuleHTTPS",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('agentsLbIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPSProbe')]"
                            }
                        }
                    },
                    {
                        "name": "LBRulePort8080",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('agentsLbIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 8080,
                            "backendPort": 8080,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(variables('agentsLbID'),'/probes/tcpPort8080Probe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpHTTPProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "tcpHTTPSProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "tcpPort8080Probe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 8080,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": []
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "sku": {
                "name": "[variables('agentVMSize')]",
                "tier": "Standard",
                "capacity": "[variables('agentCount')]"
            },
            "name": "[concat(variables('agentVMNamePrefix'), '-vmss')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "upgradePolicy": {
                    "mode": "Automatic"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "imageReference": {
                            "publisher": "[variables('osImagePublisher')]",
                            "offer": "[variables('osImageOffer')]",
                            "sku": "[variables('osImageSKU')]",
                            "version": "latest"
                        },
                        "osDisk": {
                            "name": "[concat(variables('agentVMNamePrefix'), 'vmssosdisk', 0)]",
                            "vhdContainers": [
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(0,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(0,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),1), variables('storageApiVersion') ).primaryEndpoints.blob, 'osdisk')]",
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(1,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(1,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),2), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]",
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(2,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(2,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),3), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]",
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(3,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(3,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),4), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]",
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(4,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(4,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),5), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]"
                            ],
                            "caching": "ReadWrite",
                            "createOption": "FromImage"
                        }
                    },
                    "osProfile": {
                        "computerNamePrefix": "[variables('agentVMNamePrefix')]",
                        "adminUsername": "[variables('adminUsername')]",
                        "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        ',variables('cloudConfigScript'),'\n    path: ',variables('cloudConfigScriptLocation'),'\n    permissions: \"0744\"\n\n',concat(' -  content: |\n        #!/bin/bash\n        ',concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',concat('0',' ','none',' ',reference(resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-0'))).ipConfigurations[0].properties.privateIPAddress, ' ',variables('adminUsername'),' ',variables('postInstallScriptURI')),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &'),'\n    path: /opt/azure/containers/install-cluster.sh\n    permissions: \"0744\"\n'),concat('runcmd:\n -  [ /bin/bash, /opt/azure/containers/install-cluster.sh ]\n\n')))]",
                        "linuxConfiguration": "[variables('linuxConfiguration')]"
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "workerNodeNic",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "workerNodeNicIPConfig",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[variables('workerSubnetRef')]"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "LinuxDiagnostic",
                                "properties": {
                                    "publisher": "Microsoft.OSTCExtensions",
                                    "type": "LinuxDiagnostic",
                                    "typeHandlerVersion": "2.3",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('agentVMNamePrefix'), variables('wadcfgxend')))]",
                                        "StorageAccount": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]"
                                    },
                                    "protectedSettings": {
                                        "storageAccountName": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]",
                                        "storageAccountKey": "[listKeys(variables('accountid'), variables('storageApiVersion')).key1]"
                                    }
                                }
                            }
                        ]
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": "[variables('enableVMDiagnostics')]",
                            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(0,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(0,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),1)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(1,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(1,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),2)]",
                "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(2,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(2,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),3)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(3,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(3,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),4)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(4,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(4,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),5)]",
                "[variables('agentsLbID')]",
                "[variables('vnetID')]",
                "[variables('diagnosticsStorageAccountName')]",
                "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), '0'))]"
            ]
        }
    ],
    "outputs": {
        "masterFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
        },
        "agentFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))).dnsSettings.fqdn]"
        },
        "diagnosticsStorageAccountUri": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
        }
    }
}